ARM GAS  /tmp/ccyUCHJL.s 			page 1


   1              	# 1 "crt0.S"
   1              	/* ************************************************************************************************
   0              	
   0              	
   2              	
   3              		crt.s						STARTUP  ASSEMBLY  CODE 
   4              									-----------------------
   5              	
   6              	
   7              		Module includes the interrupt vectors and start-up code.
   8              	
   9              	  *************************************************************************************************
  10              	
  11              	/* Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs (program status registers)
  12              	.set  MODE_USR, 0x10            		/* Normal User Mode 										*/
  13              	.set  MODE_FIQ, 0x11            		/* FIQ Processing Fast Interrupts Mode 						*/
  14              	.set  MODE_IRQ, 0x12            		/* IRQ Processing Standard Interrupts Mode 					*/
  15              	.set  MODE_SVC, 0x13            		/* Supervisor Processing Software Interrupts Mode 			*/
  16              	.set  MODE_ABT, 0x17            		/* Abort Processing memory Faults Mode 						*/
  17              	.set  MODE_UND, 0x1B            		/* Undefined Processing Undefined Instructions Mode 		*/
  18              	.set  MODE_SYS, 0x1F            		/* System Running Priviledged Operating System Tasks  Mode	*/
  19              	
  20              	.set  I_BIT, 0x80               		/* when I bit is set, IRQ is disabled (program status registers) 
  21              	.set  F_BIT, 0x40               		/* when F bit is set, FIQ is disabled (program status registers) 
  22              	.set  NO_INT, (I_BIT | F_BIT)			/*mask to disable IRQ and FIQ */
  23              	
  24              	.set  PCONP,			0xE01FC0C4
  25              	.set  VICVectAddr,		0xFFFFF030
  26              	
  27              	.text
  28              	.arm
  29              	
  30              	.global	Reset_Handler
  31              	.global _startup
  32              	.func   _startup
  33              	
  34              	_startup:
  35              	
  36              	# Exception Vectors
  37              	
  38 0000 18F09FE5 	_vectors:       ldr     PC, Reset_Addr         
  39 0004 18F09FE5 	                ldr     PC, Undef_Addr
  40 0008 18F09FE5 	                ldr     PC, SWI_Addr
  41 000c 18F09FE5 	                ldr     PC, PAbt_Addr
  42 0010 18F09FE5 	                ldr     PC, DAbt_Addr
  43 0014 0000A0E1 	                nop							/* Reserved Vector (holds Philips ISP checksum) */
  44 0018 14F09FE5 	                ldr     PC, IRQ_Addr		/* see page 71 of "Insiders Guide to the Philips ARM7-Based M
  45 001c 14F09FE5 	                ldr     PC, FIQ_Addr
  46              	
  47 0020 00000000 	Reset_Addr:     .word   Reset_Handler
  48 0024 7C010000 	Undef_Addr:     .word   UNDEF_Routine
  49 0028 C0000000 	SWI_Addr:       .word   ARM_swi
  50 002c 7C010000 	PAbt_Addr:      .word   UNDEF_Routine
  51 0030 7C010000 	DAbt_Addr:      .word   UNDEF_Routine
  52 0034 EC000000 	IRQ_Addr:       .word   ARM_irq
  53 0038 40010000 	FIQ_Addr:       .word   ARM_fiq	
  54              		
ARM GAS  /tmp/ccyUCHJL.s 			page 2


  55 003c 00000000 					.word   0					/* rounds the vectors and ISR addresses to 64 bytes total  */
  56              	
  57              	
  58              	# Reset Handler
  59              	
  60              	Reset_Handler:  
  61              	
  62              		/* Turn on USB to enable USB DMA RAM area */
  63 0040 38119FE5 		ldr		r1, =PCONP				// load address of PCONP register
  64 0044 002091E5 		ldr		r2, [r1]				// load value of PCONP
  65 0048 0130A0E3 		mov		r3, #1					// load 1
  66 004c 832F82E1 		orr		r2, r3, lsl #31			// set bit 31
  67 0050 002081E5 		str		r2, [r1]				// store back into PCONP
  68              	
  69              		/* Setup a stack for each mode - note that this only sets up a usable stack
  70              		for User mode.   Also each mode is setup with interrupts initially disabled. */
  71              	    			 
  72              		// Set up stack for every mode but user/system mode.
  73              		// The bootloader will run in SVC mode
  74 0054 DBF021E3 		msr   CPSR_c, #MODE_UND|I_BIT|F_BIT 	/* Undefined Instruction Mode  */
  75 0058 D7F021E3 		msr   CPSR_c, #MODE_ABT|I_BIT|F_BIT 	/* Abort Mode */
  76 005c D1F021E3 		msr   CPSR_c, #MODE_FIQ|I_BIT|F_BIT 	/* FIQ Mode */
  77 0060 D2F021E3 		msr   CPSR_c, #MODE_IRQ|I_BIT|F_BIT 	/* IRQ Mode */
  78 0064 D3F021E3 		msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT 	/* Supervisor Mode */
  79              		//ldr   sp, =_svc_stack_end
  80 0068 14D19FE5 		ldr   sp, =_user_stack_end
  81              	
  82              		/* copy .data section (Copy from ROM to RAM) */
  83 006c 14119FE5 		ldr     R1, =_flash_data_start
  84 0070 14219FE5 		ldr     R2, =_data
  85 0074 14319FE5 		ldr     R3, =_edata
  86              	1:	
  87 0078 030052E1 		cmp     R2, R3
  88 007c 04009134 		ldrlo   R0, [R1], #4
  89 0080 04008234 		strlo   R0, [R2], #4
  90 0084 FBFFFF3A 		blo     1b
  91              	
  92              		/* Clear .bss section (Zero init)  */
  93 0088 0000A0E3 		mov     R0, #0
  94 008c 00119FE5 		ldr     R1, =_bss_start
  95 0090 00219FE5 		ldr     R2, =_bss_end
  96              	2:  
  97 0094 020051E1 		cmp     R1, R2
  98 0098 04008134 		strlo   R0, [R1], #4
  99 009c FCFFFF3A 		blo     2b
 100              	
 101              		/* Enter the C code  */
 102 00a0 FEFFFFEA 		b       main
 103              	
 104              	.endfunc
 105              	
 106              	// table of function pointers for SWI routines
 107 00a4 0000A0E1 	.align 4
 107      0000A0E1 
 107      0000A0E1 
 108              	SWItbl:
 109              	
ARM GAS  /tmp/ccyUCHJL.s 			page 3


 110              	/*
 111              	
 112              	We are in SVC mode with FIQ on, IRQ off.
 113              	
 114              	Need to save r12 (which we are using as a scratch register),
 115              	and lr, which will get overwritten when we branch and link
 116              	to the SWI. I suppose we don't REALLY need to save r12,
 117              	but the ABI requires that we keep the stack pointer 
 118              	double word aligned, so we should push 2 regs to the stack.
 119              	
 120              	*/
 121 00b0 73776920 	dbgstr: .asciz "swi number: %d\n"
 121      6E756D62 
 121      65723A20 
 121      25640A00 
 122              	
 123              	.func ARM_swi
 124              	ARM_swi:
 125 00c0 00502DE9 		push	{r12, lr}				// save r12 and lr
 126 00c4 04C01EE5 		ldr		r12, [lr, #-4]			// get the instruction which caused the SWI
 127 00c8 FFC4CCE3 		bic		r12,r12,#0xff000000		// mask off SWI bits
 128              		
 129 00cc 08005CE3 		cmp		r12, #8					// bounds check
 130 00d0 0300002A 		bhs		.L8
 131              	
 132 00d4 C0E09FE5 		ldr  	lr,=SWItbl				// load base of jump array
 133 00d8 0CC18EE0 		add		r12,lr,r12,lsl #2		// compute jump address
 134 00dc 0FE0A0E1 		mov		lr,pc					// save return address
 135 00e0 00F09CE5 		ldr		pc, [r12]				// jump to SWI routine
 136              		
 137              	.L8:
 138 00e4 0050BDE8 		pop		{r12, lr}				// restore r12 and lr from the SVC stack
 139 00e8 0EF0B0E1 		movs	pc,lr					// return from interrupt restoring CPSR from SPSR
 140              	.endfunc
 141              	
 142              	/*
 143              	
 144              	ARM_irq can come only from user, system, or SVC mode. The state
 145              	always gets saved on the SVC stack, and the handling of the IRQ is
 146              	dispatched to whatever mode we came from.
 147              	
 148              	It disables IRQ interrupts, but does NOT disable FIQ interrupts.
 149              	This is so that if the user code enters an infinite loop or crashes,
 150              	the USB interface will still be responsive.
 151              	
 152              	We need to save r0-r3, r12-14 from the mode that was executing before
 153              	the interrupt was triggered.
 154              	
 155              	We do not trust the user stack. We should save and restore the user registers
 156              	faithfully, but we should not do any memory accesses based on the stack pointer
 157              	or link register from user mode. We should only access memory using the
 158              	supervisor stack.
 159              	
 160              	r0 gets saved in r13_IRQ and r1 gets saved r14_IRQ.
 161              	
 162              	*/
 163              	.func ARM_irq
ARM GAS  /tmp/ccyUCHJL.s 			page 4


 164              	ARM_irq:
 165 00ec 04E04EE2 		sub		lr,lr,#4					// compute return address
 166 00f0 A8D09FE5 		ldr		r13, =_svc_stack_end		// load address of register save area
 167 00f4 0F108DE8 		stm		r13, {r0-r3,r12}				// still need to save lr of source mode
 168              		
 169 00f8 00004FE1 		mrs		r0, SPSR					// get source mode
 170 00fc C00080E3 		orr		r0, r0, #NO_INT				// turn off interrupts in source mode
 171 0100 00F021E1 		msr		CPSR_c,r0					// switch to source mode with all interrupts off
 172              	
 173 0104 94C09FE5 		ldr		r12, =_svc_stack_end		// we have 24 bytes at the top of ram to use for storage
 174 0108 14E08CE5 		str		lr, [r12, #20]				// save lr to register save area. Register save area now has r0-r3, r12, lr
 175              	
 176 010c 4000C0E3 		and		r0, r0, #~F_BIT				// turn on FIQ interrupts
 177 0110 00F021E1 		msr		CPSR_c,r0
 178              	
 179              		/* Enter user IRQ C Code by jumping to value of VICVectAddr */
 180 0114 88C09FE5 		LDR		r12,=VICVectAddr			// VICVectAddr: contains pointer to C function to execute */
 181 0118 0FE0A0E1 		MOV		lr,pc						// copy the return address to link register */
 182 011c 00F09CE5 		ldr		pc, [r12]
 183              		/* Exit user C code */
 184              	
 185 0120 7CC09FE5 		ldr		r12,=VICVectAddr			// write 0 to VICVectAddr
 186 0124 00E0A0E3 		mov		lr, #0
 187 0128 00E08CE5 		str		lr, [r12]
 188              		
 189              		/*
 190              		mrs		r12, CPSR					// get current mode
 191              		orr		r12, r12, #NO_INT			// turn off all interrupts
 192              		msr		CPSR_c,r12
 193              		*/
 194              	
 195 012c 6CC09FE5 		ldr		r12, =_svc_stack_end		// restore lr
 196 0130 14E09CE5 		ldr		lr, [r12, #20]
 197              	
 198 0134 D2F021E3 		msr		CPSR_c,#(MODE_IRQ | NO_INT)	// change to IRQ mode
 199 0138 0F109DE8 		ldm		r13, {r0-r3, r12}			// restore value of r0-r3, r12
 200 013c 0EF0B0E1 		movs	pc,lr						// return restoring CPSR from SPSR
 201              	.endfunc
 202              	
 203              	// When we enter FIQ, we could be coming from any other mode (except FIQ)
 204              	// We need to save all state and switch to SVC mode before
 205              	// handling the interrupt. Need to save r0-r3, r12, lr
 206              	.func ARM_fiq
 207              	ARM_fiq: 
 208 0140 04E04EE2 		sub		lr,lr,#4						// save return address in r14_fiq (where to resume execution after interrupt)
 209 0144 0080A0E1 		mov		r8, r0							// save clobbered regs 
 210 0148 0190A0E1 		mov		r9, r1							// regs r4-r14 excluding r12 are callee-saved,
 211 014c 02A0A0E1 		mov		r10, r2							// so we don't need to save them
 212 0150 03B0A0E1 		mov		r11, r3
 213              									
 214 0154 D3F021E3 		MSR     cpsr_c,#(MODE_SVC | NO_INT)		// switch to SVC mode and handle interrupt
 215 0158 00502DE9 		push	{r12,lr}						// push r12,lr to the SVC stack
 216 015c FEFFFFEB 		bl		USBHwISR						// handle the interrupt
 217 0160 0050BDE8 		pop		{r12,lr}						// restore r12,lr from the SVC stack
 218              	
 219              		// need to restore all registers. restore r12-24 from FIQ mode to previous mode
 220 0164 D1F021E3 		msr     cpsr_c,#(MODE_FIQ | NO_INT)		// switch to FIQ mode
ARM GAS  /tmp/ccyUCHJL.s 			page 5


 221 0168 0800A0E1 		mov		r0, r8
 222 016c 0910A0E1 		mov		r1, r9
 223 0170 0A20A0E1 		mov		r2, r10
 224 0174 0B30A0E1 		mov		r3, r11
 225              	
 226 0178 0EF0B0E1 		MOVS    pc, lr							// return restoring CPSR from SPSR
 227              		
 228              	.endfunc
 229              	
 230              	
 231              	// handles Data Abort, Prefetch Abort, and Undefined exceptions.
 232              	// Should check to see which mode we came from. If we came from
 233              	// user mode, system mode, or IRQ mode, we need to print out a message
 234              	// then switch to SVC mode and call svc_idle(), which will just hang
 235              	// out until the user programs new firmware.
 236              	// If we came from FIQ mode, SVC mode, Undefined, or Abort mode that means we've got a bug
 237              	// in the supervisor. Display blue screen of death.
 238              	.func UNDEF_Routine
 239              	UNDEF_Routine:
 240              		// if we got here, then we're bad.
 241 017c FEFFFFEA 		b .
 242              	.endfunc
 243              	
 244 0180 C4C01FE0 	.end
 244      00000000 
 244      00000000 
 244      00000000 
 244      00000000 
ARM GAS  /tmp/ccyUCHJL.s 			page 6


DEFINED SYMBOLS
              crt0.S:12     *ABS*:00000010 MODE_USR
              crt0.S:13     *ABS*:00000011 MODE_FIQ
              crt0.S:14     *ABS*:00000012 MODE_IRQ
              crt0.S:15     *ABS*:00000013 MODE_SVC
              crt0.S:16     *ABS*:00000017 MODE_ABT
              crt0.S:17     *ABS*:0000001b MODE_UND
              crt0.S:18     *ABS*:0000001f MODE_SYS
              crt0.S:20     *ABS*:00000080 I_BIT
              crt0.S:21     *ABS*:00000040 F_BIT
              crt0.S:22     *ABS*:000000c0 NO_INT
              crt0.S:24     *ABS*:e01fc0c4 PCONP
              crt0.S:25     *ABS*:fffff030 VICVectAddr
              crt0.S:60     .text:00000040 Reset_Handler
              crt0.S:34     .text:00000000 _startup
              crt0.S:38     .text:00000000 _vectors
              crt0.S:47     .text:00000020 Reset_Addr
              crt0.S:38     .text:00000000 $a
              crt0.S:48     .text:00000024 Undef_Addr
              crt0.S:49     .text:00000028 SWI_Addr
              crt0.S:50     .text:0000002c PAbt_Addr
              crt0.S:51     .text:00000030 DAbt_Addr
              crt0.S:52     .text:00000034 IRQ_Addr
              crt0.S:53     .text:00000038 FIQ_Addr
              crt0.S:47     .text:00000020 $d
              crt0.S:239    .text:0000017c UNDEF_Routine
              crt0.S:124    .text:000000c0 ARM_swi
              crt0.S:164    .text:000000ec ARM_irq
              crt0.S:207    .text:00000140 ARM_fiq
              crt0.S:63     .text:00000040 $a
              crt0.S:108    .text:000000b0 SWItbl
              crt0.S:121    .text:000000b0 dbgstr
              crt0.S:121    .text:000000b0 $d
              crt0.S:125    .text:000000c0 $a
              crt0.S:244    .text:00000180 $d
              crt0.S:244    .text:000001a8 $a

UNDEFINED SYMBOLS
_user_stack_end
_flash_data_start
_data
_edata
_bss_start
_bss_end
main
_svc_stack_end
USBHwISR
